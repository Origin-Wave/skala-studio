---
import { ButtonVariant } from "@components/ui/button/Button.models";
import type { HTMLAttributes } from "astro/types";

type SharedButtonProps = {
  variant?: ButtonVariant;
};

type AnchorProps = HTMLAttributes<"a">;

type ButtonProps = HTMLAttributes<"button">;

type Props = SharedButtonProps & (AnchorProps | ButtonProps);

const {
  variant = ButtonVariant.Primary,
  class: className,
  children,
  ...props
} = Astro.props;

const buttonClasses = [
  "button",
  {
    "button--primary": variant === ButtonVariant.Primary,
    "button--secondary": variant === ButtonVariant.Secondary,
  },
  className,
];

const isLink = Object.hasOwn(props, "href");
---

{
  isLink ? (
    <a {...(props as AnchorProps)} class:list={buttonClasses}>
      <slot />
    </a>
  ) : (
    <button {...(props as ButtonProps)} class:list={buttonClasses}>
      <slot />
    </button>
  )
}

<style lang="scss">
  .button {
    --button-background-position: 0;
    --button-background: transparent;
    --button-text-color: transparent;
    --button-text-color-active: transparent;

    &,
    &:any-link {
      appearance: none;
      background: var(--button-background);
      border: 0;
      font-family: inherit;
      font-size: var(--ss-font-size-small);
      font-weight: var(--ss-font-secondary-weight-bold);
      text-align: inherit;
      text-decoration: none;
      text-transform: uppercase;
      padding: 0 var(--ss-size-5);
      height: var(--ss-size-7);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--button-text-color);
      border-radius: var(--ss-border-radius-1);
      transition: var(--ss-transition-action);
      line-height: 1.5;
      transform: translateY(0);
      box-shadow: none;
    }

    &:hover {
      color: var(--button-text-color-active);
      background: var(--button-background-active);
      transform: translateY(calc(var(--ss-size-1) * -0.5));
      box-shadow: 0 var(--ss-size-2) var(--ss-size-3)
        color-mix(in srgb, var(--ss-color-soil) 10%, transparent);
    }
  }

  .button--primary {
    &,
    &:any-link {
      --button-background: var(--ss-color-leaf);
      --button-background-active: var(--ss-color-leaf-active);
      --button-text-color: var(--ss-color-stone-alt);
      --button-text-color-active: var(--ss-color-stone-alt);
    }
  }

  .button--secondary {
    &,
    &:any-link {
      --button-background: var(--ss-color-stone-alt);
      --button-background-active: var(--ss-color-stone);
      --button-text-color: var(--ss-color-soil);
      --button-text-color-active: var(--ss-color-soil);

      border: 1px solid
        color-mix(in srgb, var(--button-text-color) 20%, transparent);

      :global(.ss-text-alt) & {
        border: none;
      }
    }
  }
</style>
